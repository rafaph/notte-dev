#!/usr/bin/env node

const path = require("path");
const fs = require("fs");
const { execSync } = require("child_process");

const rootPath = path.join(__dirname, "..");
const servicesPath = path.join(rootPath, "services");
const repositoriesPath = path.join(servicesPath, "repositories.json");
const repositories = Object.entries(
  JSON.parse(fs.readFileSync(repositoriesPath).toString("utf-8"))
);

function loadUser() {
  const uid = execSync("id -u", {
    env: process.env,
  }).toString("utf-8");

  const gid = execSync("id -g", {
    env: process.env,
  }).toString("utf-8");

  process.env.HOST_UID = uid;
  process.env.HOST_GID = gid;
}

function getDatabaseServices() {
  return repositories
    .map((repository) => ({
      service: repository[0],
      database: repository[1].database
    }))
    .filter((database) => !!database.database);
}

async function startDatabase() {
  execSync(
    `docker compose up mysql -d`,
    {
      stdio: "inherit",
      env: process.env,
      cwd: rootPath,
    }
  );

  await new Promise((resolve) => setTimeout(resolve, 10000));
}

function stopDatabase() {
  execSync(
    `docker compose down --remove-orphans`,
    {
      stdio: "inherit",
      env: process.env,
      cwd: rootPath,
    }
  );
}

function createDatabases() {
  const services = getDatabaseServices();

  for (const { service, database } of services) {
    execSync(`scripts/_create-database ${database.name}`, {
      cwd: rootPath,
      stdio: "inherit",
      env: process.env,
    });

    execSync(`scripts/_migrate-database ${service} ${database.migrate}`, {
      cwd: rootPath,
      stdio: "inherit",
      env: process.env,
    });
  }
}

async function main() {
  loadUser();
  await startDatabase();
  createDatabases();
  stopDatabase();
}

void main();
